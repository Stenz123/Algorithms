package dev.stenz.algorithms

import dev.stenz.algorithms.coordinates.c2d.CoordinateMap2d
import org.junit.jupiter.api.Test
import kotlin.test.assertEquals

class TestFloodFill {

    @Test
    fun basicFloodFill() {
        var input = "-------------------\n" +
                "-----***********---\n" +
                "---**************--\n" +
                "--*****--******----\n" +
                "-****----******----\n" +
                "--***X*********----\n" +
                "-***********--**---\n" +
                "--****-****----*---\n" +
                "---*******----**---\n" +
                "----****-----***---\n" +
                "----**------****---\n" +
                "---*****--*******--\n" +
                "--*******---***----\n" +
                "-*****-------------\n" +
                "-**-*---------*----\n" +
                "-*********---------\n" +
                "--***-**-----**----\n" +
                "---**--------**----\n" +
                "----**-------**----\n"

        var coords = CoordinateMap2d.parse(input, listOf('*', 'X')).map{ it.second }.flatten()
        var start = CoordinateMap2d.parse(input, 'X')[0]
        assertEquals(151, FloodFill.basicFill(coords, start).size)

        input = "---------------------------\n" +
                "--------***********--------\n" +
                "-----***************-------\n" +
                "---*************-*****-----\n" +
                "--***************---***----\n" +
                "-*****************---*-----\n" +
                "-*****************---*-----\n" +
                "-*************--------*----\n" +
                "-**********------------*---\n" +
                "-*******----------------*--\n" +
                "-*******----------------*--\n" +
                "--****------------------*--\n" +
                "--****------------------*--\n" +
                "---****-----------------*--\n" +
                "---****-----------------*--\n" +
                "-----*******************---\n" +
                "------*****************----\n" +
                "--------**************-----\n" +
                "--------************-------\n" +
                "--------************-------\n" +
                "---------*********---------\n" +
                "---------*******-----------\n" +
                "---------*******-----------\n" +
                "---------*******-----------\n" +
                "----------*****------------\n" +
                "-------------X-------------\n"

        coords = CoordinateMap2d.parse(input, listOf('*', 'X')).map { it.second }.flatten()
        start = CoordinateMap2d.parse(input, 'X')[0]
        assertEquals(261, FloodFill.basicFill(coords, start).size)
    }

    @Test
    fun basicFloodFill8Directions() {
        var input = "-------------------\n" +
                "-----***********---\n" +
                "---**************--\n" +
                "--*****--******----\n" +
                "-****----******----\n" +
                "--***X*********----\n" +
                "-***********--**---\n" +
                "--****-****----*---\n" +
                "---*******----**---\n" +
                "----****-----***---\n" +
                "----**------****---\n" +
                "---*****--*******--\n" +
                "--*******---***----\n" +
                "-*****-------------\n" +
                "-**-*---------*----\n" +
                "-*********---------\n" +
                "--***-**-----**----\n" +
                "---**--------**----\n" +
                "----**-------**----\n"

        var coords = CoordinateMap2d.parse(input, listOf('*', 'X')).map{ it.second }.flatten()
        var start = CoordinateMap2d.parse(input, 'X')[0]
        assertEquals(151, FloodFill.basicFill(coords, start, true).size)

        input = "---------------------------\n" +
                "--------***********--------\n" +
                "-----***************-------\n" +
                "---*************-*****-----\n" +
                "--***************---***----\n" +
                "-*****************---*-----\n" +
                "-*****************---*-----\n" +
                "-*************--------*----\n" +
                "-**********------------*---\n" +
                "-*******----------------*--\n" +
                "-*******----------------*--\n" +
                "--****------------------*--\n" +
                "--****------------------*--\n" +
                "---****-----------------*--\n" +
                "---****-----------------*--\n" +
                "-----*******************---\n" +
                "------*****************----\n" +
                "--------**************-----\n" +
                "--------************-------\n" +
                "--------************-------\n" +
                "---------*********---------\n" +
                "---------*******-----------\n" +
                "---------*******-----------\n" +
                "---------*******-----------\n" +
                "----------*****------------\n" +
                "-------------X-------------\n"

        coords = CoordinateMap2d.parse(input, listOf('*', 'X')).map { it.second }.flatten()
        start = CoordinateMap2d.parse(input, 'X')[0]
        assertEquals(269, FloodFill.basicFill(coords, start, true).size)
    }


    //@Test
    //fun rectangleFill() {
    //    var input = "------------------------------------\n" +
    //                "------------------------------------\n" +
    //                "---------********************-------\n" +
    //                "-------***------------------****----\n" +
    //                "------**-----------------------***--\n" +
    //                "----***--------------------------**-\n" +
    //                "--***-----------------------------**\n" +
    //                "-**--------------------------------*\n" +
    //                "-**------------X-------------------*\n" +
    //                "-*---------------------------------*\n" +
    //                "-*-------------***-----------------*\n" +
    //                "-*----------****--****--------------*\n" +
    //                "--**--------*-------*--------------*\n" +
    //                "----**------*********-----------***-\n" +
    //                "-----****---------------------***---\n" +
    //                "--------******-------------****-----\n" +
    //                "-------------***************--------\n" +
    //                "------------------------------------\n" +
    //                "------------------------------------\n"
//
    //    var coords = HashSet(CoordinateMap2d.parse(input, listOf('*')).map{ it.second }.flatten())
//
//
    //    var start = CoordinateMap2d.parse(input, 'X')[0]
    //    FloodFill.basicFill(coords.toList(), start).toList().draw()
    //    FloodFill.rectangleFill(coords, start).toList().draw()
//
    //    println()
//
    //    input = "-----------------------\n" +
    //            "-----------------------\n" +
    //            "-----------------------\n" +
    //            "------**************---\n" +
    //            "------*------------*---\n" +
    //            "------*------------*---\n" +
    //            "------*------------*---\n" +
    //            "------*--X---------*---\n" +
    //            "------*------------*---\n" +
    //            "------*------------*---\n" +
    //            "------*------------*---\n" +
    //            "------**************---\n" +
    //            "-----------------------\n" +
    //            "-----------------------\n" +
    //            "-----------------------\n" +
    //            "-----------------------\n" +
    //            "-----------------------\n" +
    //            "-----------------------\n" +
    //            "-----------------------\n"
//
    //    coords = HashSet(CoordinateMap2d.parse(input, listOf('*')).map{ it.second }.flatten())
    //    start = CoordinateMap2d.parse(input, 'X')[0]
    //    FloodFill.rectangleFill(coords, start).toList().draw()
//
    //    println()
    //}


}