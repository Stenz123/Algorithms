package dev.stenz.algorithms

import dev.stenz.algorithms.coordinates.c2d.CoordinateMap2d
import org.junit.jupiter.api.Test
import kotlin.test.assertEquals

class TestFlood {

    @Test
    fun basicFloodFill() {
        var input = "-------------------\n" +
                "-----***********---\n" +
                "---**************--\n" +
                "--*****--******----\n" +
                "-****----******----\n" +
                "--***X*********----\n" +
                "-***********--**---\n" +
                "--****-****----*---\n" +
                "---*******----**---\n" +
                "----****-----***---\n" +
                "----**------****---\n" +
                "---*****--*******--\n" +
                "--*******---***----\n" +
                "-*****-------------\n" +
                "-**-*---------*----\n" +
                "-*********---------\n" +
                "--***-**-----**----\n" +
                "---**--------**----\n" +
                "----**-------**----\n"

        var coords = CoordinateMap2d.parse(input, listOf('*', 'X')).map{ it.second }.flatten()
        var start = CoordinateMap2d.parse(input, 'X')[0]
        assertEquals(151, Flood.basicFill(coords, start).size)

        input = "---------------------------\n" +
                "--------***********--------\n" +
                "-----***************-------\n" +
                "---*************-*****-----\n" +
                "--***************---***----\n" +
                "-*****************---*-----\n" +
                "-*****************---*-----\n" +
                "-*************--------*----\n" +
                "-**********------------*---\n" +
                "-*******----------------*--\n" +
                "-*******----------------*--\n" +
                "--****------------------*--\n" +
                "--****------------------*--\n" +
                "---****-----------------*--\n" +
                "---****-----------------*--\n" +
                "-----*******************---\n" +
                "------*****************----\n" +
                "--------**************-----\n" +
                "--------************-------\n" +
                "--------************-------\n" +
                "---------*********---------\n" +
                "---------*******-----------\n" +
                "---------*******-----------\n" +
                "---------*******-----------\n" +
                "----------*****------------\n" +
                "-------------X-------------\n"

        coords = CoordinateMap2d.parse(input, listOf('*', 'X')).map { it.second }.flatten()
        start = CoordinateMap2d.parse(input, 'X')[0]
        assertEquals(261, Flood.basicFill(coords, start).size)
    }

    @Test
    fun basicFloodFill8Directions() {
        var input = "-------------------\n" +
                "-----***********---\n" +
                "---**************--\n" +
                "--*****--******----\n" +
                "-****----******----\n" +
                "--***X*********----\n" +
                "-***********--**---\n" +
                "--****-****----*---\n" +
                "---*******----**---\n" +
                "----****-----***---\n" +
                "----**------****---\n" +
                "---*****--*******--\n" +
                "--*******---***----\n" +
                "-*****-------------\n" +
                "-**-*---------*----\n" +
                "-*********---------\n" +
                "--***-**-----**----\n" +
                "---**--------**----\n" +
                "----**-------**----\n"

        var coords = CoordinateMap2d.parse(input, listOf('*', 'X')).map{ it.second }.flatten()
        var start = CoordinateMap2d.parse(input, 'X')[0]
        assertEquals(151, Flood.basicFill(coords, start, true).size)

        input = "---------------------------\n" +
                "--------***********--------\n" +
                "-----***************-------\n" +
                "---*************-*****-----\n" +
                "--***************---***----\n" +
                "-*****************---*-----\n" +
                "-*****************---*-----\n" +
                "-*************--------*----\n" +
                "-**********------------*---\n" +
                "-*******----------------*--\n" +
                "-*******----------------*--\n" +
                "--****------------------*--\n" +
                "--****------------------*--\n" +
                "---****-----------------*--\n" +
                "---****-----------------*--\n" +
                "-----*******************---\n" +
                "------*****************----\n" +
                "--------**************-----\n" +
                "--------************-------\n" +
                "--------************-------\n" +
                "---------*********---------\n" +
                "---------*******-----------\n" +
                "---------*******-----------\n" +
                "---------*******-----------\n" +
                "----------*****------------\n" +
                "-------------X-------------\n"

        coords = CoordinateMap2d.parse(input, listOf('*', 'X')).map { it.second }.flatten()
        start = CoordinateMap2d.parse(input, 'X')[0]
        assertEquals(269, Flood.basicFill(coords, start, true).size)
    }

}